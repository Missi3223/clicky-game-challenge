{"version":3,"sources":["Components/MatchCard/MatchCard.js","Components/GameControl/GameControl.js","Components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["MatchCard","props","react_default","a","createElement","className","key","id","onClick","handleClick","clicked","src","image","alt","GameControl","state","images","message","score","topScore","imageOrder","_this","forEach","index","setState","sort","Math","random","_this$state","newScore","newTopScore","_this2","this","map","Components_MatchCard_MatchCard","React","Component","Jumbotron","App","Components_Jumbotron_Jumbotron","Components_GameControl_GameControl","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ohCAsBeA,SAlBG,SAAAC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OACAC,UAAU,wDACVC,IAAKL,EAAMM,GACXC,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMM,GAAIN,EAAMS,WAEjDR,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBAChBH,EAAAC,EAAAC,cAAA,OACAG,GAAIN,EAAMM,GACVI,IAAKV,EAAMW,MACXC,IAAKZ,EAAMS,8BC4DEI,6MArEdC,MAAQ,CACPC,SACAC,QAAS,4CACTC,MAAO,EACPC,SAAU,KAGXV,YAAc,SAACF,EAAIG,GAElB,IAAMU,EAAaC,EAAKN,MAAMC,OAE9B,GAAIN,EAIH,OAHAU,EAAWE,QAAQ,SAACV,EAAOW,GAC1BH,EAAWG,GAAOb,SAAU,IAEtBW,EAAKG,SAAS,CACpBZ,MAAOQ,EAAWK,KAAK,kBAAMC,KAAKC,SAAW,KAC7CV,QAAS,WACTC,MAAO,IAIRE,EAAWE,QAAQ,SAACV,EAAOW,GACtBhB,IAAOK,EAAML,KAChBa,EAAWG,GAAOb,SAAU,KAH1B,IAAAkB,EAOwBP,EAAKN,MAAzBI,EAPJS,EAOIT,SACFU,EARFD,EAOcV,MACO,EACnBY,EAAcD,EAAWV,EAAWU,EAAWV,EAErD,OAAOE,EAAKG,SAAS,CACpBZ,MAAOQ,EAAWK,KAAK,kBAAMC,KAAKC,SAAW,KAC7CV,QAAS,yBACTC,MAAOW,EACPV,SAAUW,6EAIJ,IAAAC,EAAAC,KACR,OACC9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACZH,EAAAC,EAAAC,cAAA,SAAI4B,KAAKjB,MAAME,UAEhBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACdH,EAAAC,EAAAC,cAAA,mBAAW4B,KAAKjB,MAAMG,MAAtB,iBAA2Cc,KAAKjB,MAAMI,WAExDjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACd2B,KAAKjB,MAAMC,OAAOiB,IAAI,SAAArB,GAAK,OAC3BV,EAAAC,EAAAC,cAAC8B,EAAD,CACC5B,IAAKM,EAAML,GACXA,GAAIK,EAAML,GACVG,QAASE,EAAMF,QACfE,MAAOA,EAAMA,MACbH,YAAasB,EAAKtB,0BA3DC0B,IAAMC,WCEjBC,SAJG,kBACjBnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,6CCgGbkC,SAZH,kBAENpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACfH,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,SChFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b7d399c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nconst MatchCard = props =>(\r\n\t<div\r\n\tclassName=\"allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\"\r\n\tkey={props.id}\r\n\tonClick={() => props.handleClick(props.id, props.clicked)}\r\n\t>\r\n\t<div className = \"card\">\r\n\t<div className = \"img-container\">\r\n\t\t<img\r\n\t\tid={props.id}\r\n\t\tsrc={props.image}\r\n\t\talt={props.clicked}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport default MatchCard;","import React from 'react';\r\nimport MatchCard from '../MatchCard';\r\nimport \"./style.css\";\r\nimport images from '../../imageCards.json';\r\n\r\nclass GameControl extends React.Component {\r\n\tstate = {\r\n\t\timages,\r\n\t\tmessage: \"Test your memory by clicking on any image\",\r\n\t\tscore: 0,\r\n\t\ttopScore: 0\r\n\t};\r\n\r\n\thandleClick = (id, clicked) => {\r\n\r\n\t\tconst imageOrder = this.state.images;\r\n\r\n\t\tif (clicked) {\r\n\t\t\timageOrder.forEach((image, index) => {\r\n\t\t\t\timageOrder[index].clicked = false;\r\n\t\t\t});\r\n\t\t\treturn this.setState({\r\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\r\n\t\t\t\tmessage: \"FAILURE!\",\r\n\t\t\t\tscore: 0\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\timageOrder.forEach((image, index) => {\r\n\t\t\t\tif (id === image.id) {\r\n\t\t\t\t\timageOrder[index].clicked = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst { topScore, score } = this.state;\r\n\t\t\tconst newScore = score + 1;\r\n\t\t\tconst newTopScore = newScore > topScore ? newScore : topScore;\r\n\r\n\t\t\treturn this.setState({\r\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\r\n\t\t\t\tmessage: \"You Guessed Correctly!\",\r\n\t\t\t\tscore: newScore,\r\n\t\t\t\ttopScore: newTopScore,\r\n\t\t\t})\r\n\t\t}\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container-fluid CardContainer\">\r\n\t\t\t<div className=\"gameMessage text-center\">\r\n\t\t\t\t\t\t<p>{this.state.message}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"gameScores text-center\">\r\n\t\t\t\t\t\t<p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<div className=\"container\">\r\n\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t{this.state.images.map(image => (\r\n\t\t\t\t\t\t<MatchCard\r\n\t\t\t\t\t\t\tkey={image.id}\r\n\t\t\t\t\t\t\tid={image.id}\r\n\t\t\t\t\t\t\tclicked={image.clicked}\r\n\t\t\t\t\t\t\timage={image.image}\r\n\t\t\t\t\t\t\thandleClick={this.handleClick}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default GameControl;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Jumbotron = ()=>(\r\n <div className=\"jumbotron\"><h1>Clicky Game with Code Images</h1></div>\r\n);\r\n\r\nexport default Jumbotron;","import React from 'react';\n// import imageCards from './imageCards.json';\n// import ScoreBar from './Components/ScoreBar';\nimport GameControl from './Components/GameControl';\nimport Jumbotron from './Components/Jumbotron';\n// import MatchCard from './Components/MatchCard';\n// import Wrapper from './Components/Wrapper';\nimport './App.css';\n\n\n// let correctGuesses = 0;\n// let topScore = 0;\n// let clickMessage = \"\";\n\n// class App extends Component{\n\n//   state = {\n//     imageCards,\n//     correctGuesses,\n//     topScore,\n//     clickMessage\n//   };\n\n//   setClicked = id => {\n//       // create an array of imageCards ID\n//     const imageCards = this.state.imageCards;\n//     const clickedMatch = imageCards.filter(match => match.id === id);\n//     // Set this.state.imageCards equal to the new imageCards array\n//     if (clickedMatch[0].clicked){\n//       //  local test before deploy\n//       console.log(\"Correct Guesses: \" + correctGuesses);\n//       console.log(\"Top Score: \" + topScore);\n\n//       correctGuesses = 0;\n//       clickMessage = \"FAILURE!!\"\n\n\n//       for (let i = 0; i < imageCards.length; i++){\n//         imageCards[i].clicked = false;\n//       }\n\n//       this.setState({ clickMessage});\n//       this.setState({ correctGuesses});\n//       this.setState({ imageCards});\n\n//       // otherwise if clicked = false, and user has not finished\n//     }else if (correctGuesses < 11){\n//       // set value to TRUE\n//       clickedMatch[0].clicked = true;\n//       // increase counter\n//       correctGuesses++;\n//       // this clicked Message\n//       clickMessage = \"Keep Going!!\";\n\n//       if (correctGuesses > topScore){\n//         topScore = correctGuesses;\n//         this.setState({topScore});\n//       }\n//       // SHUFFLE Time\n//       imageCards.sort(function(a, b){return 0.5 - Math.random()});\n\n//       this.setState({imageCards});\n//       this.setState({correctGuesses});\n//       this.setState({clickMessage});\n//     }else{\n\n//       clickedMatch[0].clicked = true;\n\n//       // restart the counter\n//       correctGuesses = 0;\n\n//       clickMessage = \"GREAT JOB!!! But can you do it again?\";\n//       topScore = 12;\n//       this.setState({topScore});\n\n//       for (let i = 0; i < imageCards.length; i++){\n//         imageCards[i].clicked = false;\n//       }\n//       // shuffle again.  See if we can reuse this function\n//       imageCards.sort(function(a, b){return 0.5 - Math.random()});\n\n//       this.setState({imageCards});\n//       this.setState({correctGuesses});\n//       this.setState({clickMessage});\n//     }\n//   };\n// RENDER\n\nconst App = ()=> (\n\n      <div className=\"container-fluid mainContainer\">\n      <Jumbotron />\n      <GameControl />\n\n      </div>\n\n);\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}