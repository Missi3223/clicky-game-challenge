{"version":3,"sources":["Components/Title/Title.js","Components/CodeCard/CodeCard.js","Components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","children","MatchCard","onClick","setClicked","id","alt","src","image","Wrapper","correctGuesses","topScore","clickMessage","App","state","matchcards","_this","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","Wrapper_Wrapper","Title_Title","map","CodeCard","key","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iiCAOeA,MAJf,SAAeC,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMK,WCQvBC,SARG,SAAAN,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKI,QAAS,kBAAKP,EAAMQ,WAAWR,EAAMS,KAAKL,UAAU,QACxDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKO,IAAOV,EAAMS,GAAGE,IAAOX,EAAMY,kBCArBC,MAJf,SAAiBb,GAChB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,WCIpCS,SAAiB,GACjBC,EAAW,EACXC,EAAe,yFA+GJC,6MA3GbC,MAAO,CACLC,aACAL,iBACAC,WACAC,kBAKFR,WAAa,SAAAC,GAEX,IAAMU,EAAaC,EAAKF,MAAMC,WACxBE,EAAeF,EAAWG,OAAO,SAAAC,GAAK,OAAIA,EAAMd,KAAOA,IAE7D,GAAIY,EAAa,GAAGG,QAAQ,CAE1BC,QAAQC,IAAI,oBAAsBZ,GAClCW,QAAQC,IAAI,cAAgBX,GAE5BD,EAAiB,EACjBE,EAAe,cAEf,IAAK,IAAIW,EAAI,EAAGA,EAAIR,EAAWS,OAAQD,IACrCR,EAAWQ,GAAGH,SAAU,EAG1BJ,EAAKS,SAAS,CAACb,iBACfI,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAAEV,oBAGZ,GAAIL,EAAiB,GAEzBO,EAAa,GAAGG,SAAU,EAI1BR,EAAe,iBAFfF,EAIqBC,IACnBA,EAAWD,EACXM,EAAKS,SAAS,CAACd,cAGjBI,EAAWW,KAAK,SAAS5B,EAAG6B,GAAG,MAAO,GAAMC,KAAKC,WAEjDb,EAAKS,SAAS,CAACV,eACfC,EAAKS,SAAS,CAACf,mBACfM,EAAKS,SAAS,CAACb,qBACZ,CAEHK,EAAa,GAAGG,SAAU,EAG1BV,EAAiB,EAEjBE,EAAe,wCACfD,EAAW,GACXK,EAAKS,SAAS,CAACd,aAEf,IAAK,IAAIY,EAAI,EAAGA,EAAIR,EAAWS,OAAQD,IACrCR,EAAWQ,GAAGH,SAAU,EAG1BL,EAAWW,KAAK,SAAS5B,EAAG6B,GAAG,MAAO,GAAMC,KAAKC,WAEjDb,EAAKS,SAAS,CAACV,eACfC,EAAKS,SAAS,CAACf,mBACfM,EAAKS,SAAS,CAACb,2FAKX,IAAAkB,EAAAC,KAEN,OACElC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OAChBH,EAAAC,EAAAC,cAACkC,EAAD,qCACIpC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,gBAClB+B,KAAKjB,MAAMF,eAGdf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,gBAAhB,oBACkB+B,KAAKjB,MAAMJ,eAC7Bb,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAFN,cAGYgC,KAAKjB,MAAMH,UAEvBd,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,YAENF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAChB+B,KAAKjB,MAAMC,WAAWmB,IAAI,SAAAf,GAAK,OAC9BtB,EAAAC,EAAAC,cAACoC,EAAD,CACD/B,WAAY0B,EAAK1B,WAChBC,GAAIc,EAAMd,GACV+B,IAAKjB,EAAMd,GACXG,MAASW,EAAMX,mBApGP6B,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCXNuB,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9310bf78.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nconst MatchCard = props =>(\r\n\t<div onClick={()=> props.setClicked(props.id)} className=\"card\">\r\n\t\t<div className=\"img-container\">\r\n\t\t<img alt = {props.id}src = {props.image}/>\r\n\t\t</div>\r\n\t</div>\r\n);\r\n\r\nexport default MatchCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n\treturn <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport matchcards from './matchcards.json';\nimport Title from './Components/Title';\n// import jumbotron from './Components/Jumbotron';\nimport MatchCard from './Components/CodeCard';\nimport Wrapper from './Components/Wrapper';\nimport './App.css';\n\nlet correctGuesses = 0;\nlet topScore = 0;\nlet clickMessage = \"Click on each image to gain points. BUT, do not click on the same image more than once\";\n\nclass App extends Component{\n\n  state= {\n    matchcards,\n    correctGuesses,\n    topScore,\n    clickMessage\n    // clickedImage:[],\n    // score: 0\n  };\n\n  setClicked = id => {\n      // create an array of matchcards ID\n    const matchcards = this.state.matchcards;\n    const clickedMatch = matchcards.filter(match => match.id === id);\n    // Set this.state.matchcards equal to the new matchcards array\n    if (clickedMatch[0].clicked){\n      //  local test before deploy\n      console.log(\"Correct Guesses: \" + correctGuesses);\n      console.log(\"Top Score: \" + topScore);\n\n      correctGuesses = 0;\n      clickMessage = \"Good Luck!!\"\n\n      for (let i = 0; i < matchcards.length; i++){\n        matchcards[i].clicked = false;\n      }\n\n      this.setState({clickMessage});\n      this.setState({ correctGuesses});\n      this.setState({ matchcards});\n\n      // otherwise if clicked = false, and user has not finished\n    }else if (correctGuesses < 11){\n      // set value to TRUE\n      clickedMatch[0].clicked = true;\n      // increase counter\n      correctGuesses++;\n      // this clicked Message\n      clickMessage = \"Keep Going!!\";\n\n      if (correctGuesses > topScore){\n        topScore = correctGuesses;\n        this.setState({topScore});\n      }\n      // SHUFFLE Time\n      matchcards.sort(function(a, b){return 0.5 - Math.random()});\n\n      this.setState({matchcards});\n      this.setState({correctGuesses});\n      this.setState({clickMessage});\n    }else{\n\n      clickedMatch[0].clicked = true;\n\n      // restart the counter\n      correctGuesses = 0;\n\n      clickMessage = \"GREAT JOB!!! But can you do it again?\";\n      topScore = 12;\n      this.setState({topScore});\n\n      for (let i = 0; i < matchcards.length; i++){\n        matchcards[i].clicked = false;\n      }\n      // shuffle again.  See if we can reuse this function\n      matchcards.sort(function(a, b){return 0.5 - Math.random()});\n\n      this.setState({matchcards});\n      this.setState({correctGuesses});\n      this.setState({clickMessage});\n    }\n  };\n// RENDER\n\n  render(){\n\n    return(\n      <Wrapper>\n        <div className =\"row\">\n        <Title>Clicky Game with Code Images</Title>\n            <h3 className= \"scoreSummary\">\n        {this.state.clickMessage}\n        </h3>\n        </div>\n      <br />\n      <div className =\"row\">\n        <h3 className = \"scoreSummary\">\n        Correct Guesses: {this.state.correctGuesses}\n        <br /><br />\n        Top Score: {this.state.topScore}\n        </h3>\n        <br /><br />\n        </div>\n        <div className = \"row\">\n        {this.state.matchcards.map(match => (\n          <MatchCard\n         setClicked={this.setClicked}\n          id={match.id}\n          key={match.id}\n          image = {match.image}\n          />\n        ))}\n          </div>\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}